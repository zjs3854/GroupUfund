package com.needs.api.needsapi.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.IOException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.needs.api.needsapi.controller.AuthenticationController;
import com.needs.api.needsapi.model.User;
import com.needs.api.needsapi.persistence.UserDAO;

/**
 * Test the Authentication Controller class
 * 
 * @author IceCaps
 */
@Tag("Controller-tier")
public class AuthenticationControllerControllerTest {
    private AuthenticationController authenticationController;
    private UserDAO mockUserDAO;

    /**
     * Before each test, create a new AuthenticationController object and inject
     * a mock User DAO
     */
    @BeforeEach
    public void setupAuthenticationController() {
        mockUserDAO = mock(UserDAO.class);
        authenticationController = new AuthenticationController(mockUserDAO);
    }

    @Test
    public void testGetUser() throws IOException {  // getUser may throw IOException
        // Setup
        User user = new Helper("Dawn");
        String searchString = "Dawn"
        // When the same id is passed in, our mock User DAO will return the User object
        when(mockUserDAO.getUser(user.getUsername())).thenReturn(user);

        // Invoke
        ResponseEntity<User> response = authenticationController.getUser(searchString);

        // Analyze
        assertEquals(HttpStatus.OK,response.getStatusCode());
        assertEquals(user,response.getBody());
    }

    @Test
    public void testGetAdmin() throws IOException {  // getUser may throw IOException
        // Setup
        User user = new Admin();
        String searchString = "Admin"
        // When the same id is passed in, our mock User DAO will return the User object
        when(mockUserDAO.getUser(user.getUsername())).thenReturn(user);

        // Invoke
        ResponseEntity<User> response = authenticationController.getUser(searchString);

        // Analyze
        assertEquals(HttpStatus.OK,response.getStatusCode());
        assertEquals(user,response.getBody());
    }
    
    @Test
    public void testGetUserNotFound() throws Exception { // createUser may throw IOException
        // Setup
        String name = "Jim";
        // When the same id is passed in, our mock User DAO will return null, simulating
        // no user found
        when(mockUserDAO.getUser(name)).thenReturn(null);

        // Invoke
        ResponseEntity<User> response = authenticationController.getUser(name);

        // Analyze
        assertEquals(HttpStatus.NOT_FOUND,response.getStatusCode());
    }

    @Test
    public void testGetUserHandleException() throws Exception { // createUser may throw IOException
        // Setup
        String  name = "Jim";
        // When getUser is called on the Mock User DAO, throw an IOException
        doThrow(new IOException()).when(mockUserDAO).getUser(name);

        // Invoke
        ResponseEntity<User> response = authenticationController.getUser(name);

        // Analyze
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR,response.getStatusCode());
    }

    /*****************************************************************
     * The following tests will fail until all UserController methods
     * are implemented.
     ****************************************************************/

    @Test
    public void testCreateUser() throws IOException {  // createUser may throw IOException
        // Setup
        User user = new Helper("Global Warming");
        // when createUser is called, return true simulating successful
        // creation and save
        when(mockUserDAO.createUser(user)).thenReturn(user);

        // Invoke
        ResponseEntity<User> response = authenticationController.createUser(user);

        // Analyze
        assertEquals(HttpStatus.CREATED,response.getStatusCode());
        assertEquals(user,response.getBody());
    }

    @Test
    public void testCreateUserConflict() throws IOException {  // createUser may throw IOException
        // Setup
        User user = new User("Wild Fire");
        // when createUser is called, return false simulating failed
        // creation and save
        when(mockUserDAO.createUser(user)).thenReturn(null);

        // Invoke
        ResponseEntity<User> response = userController.createUser(user);

        // Analyze
        assertEquals(HttpStatus.CONFLICT,response.getStatusCode());
    }

    @Test
    public void testCreateUserHandleException() throws IOException {  // createUser may throw IOException
        // Setup
        User user = new User("Tsunami");

        // When createUser is called on the Mock User DAO, throw an IOException
        doThrow(new IOException()).when(mockUserDAO).createUser(user);

        // Invoke
        ResponseEntity<User> response = authenticationController.createUser(user);

        // Analyze
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR,response.getStatusCode());
    }

}